"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
from decouple import AutoConfig, Csv
import logging
import os
import sys
from pathlib import Path
from django.contrib.messages import constants as message_constants
from django.urls.base import reverse_lazy
from django.core.management.utils import get_random_secret_key

# VERSION = '0.3.0'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = str(Path(__file__).resolve().parent.parent)
config = AutoConfig(BASE_DIR)
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

with open(os.path.join(BASE_DIR, 'version.txt')) as v_file:
    VERSION = v_file.read().strip().split('.')
VERSION = [int(field) for field in VERSION]
NAME = 'nomoney.shop'
# Application definition

SECRET_KEY = config('SECRET_KEY', default=get_random_secret_key())
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost', cast=Csv())
DEBUG = config('DEBUG', default=False, cast=bool)


# Database configuration
_DB = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': config('DB_NAME', default=None),
    'USER': config('DB_USER', default=None),
    'PASSWORD': config('DB_PASSWORD', default=None),
    'HOST': config('DB_HOST', default=None),
    'PORT': config('DB_PORT', default=5432),
    }

if not all((_DB['NAME'], _DB['USER'], _DB['PASSWORD'], _DB['HOST'])):
    _DB = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

DATABASES = {'default': _DB}

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_db_logger',
    'channels',
    'social_django',
    'analytical',
    'pwa',
    'core',
    'search',
    'user',
    'category',
    'listing',
    'bid',
    'chat',
    'feedback',
    'market',
    'deal',
    'location',
    'calculator',
    'action',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',

                'config.global_context.default'
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.instagram.InstagramOAuth2',

    'django.contrib.auth.backends.ModelBackend',
)




# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'de'
TIME_ZONE = 'Europe/Berlin'
USE_I18N = True
USE_L10N = True
USE_TZ = True

ASGI_APPLICATION = 'config.routing.application'
WSGI_APPLICATION = 'config.wsgi.application'

if DEBUG is True:
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': lambda x: DEBUG
    }
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware'] + MIDDLEWARE

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'user.User'

# Bootstrap fix:
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'
MESSAGE_TAGS = {
    message_constants.ERROR: 'danger',
    message_constants.DEBUG: 'dark'
    }
MESSAGE_LEVEL = message_constants.DEBUG

# LOGIN_URL = '/'
LOGIN_URL = reverse_lazy('user_login')
LOGIN_REDIRECT_URL = reverse_lazy('home')  # reverse_lazy('user_login')#'/'
LOGOUT_REDIRECT_URL = LOGIN_URL

MATOMO_DOMAIN_PATH = 'nomoney.shop/x'
MATOMO_SITE_ID = '2'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'db_log': {
            'level': 'DEBUG',
            'class': 'django_db_logger.db_log_handler.DatabaseLogHandler'
        },
    },
    'loggers': {
        'db': {
            'handlers': ['db_log'],
            'level': 'DEBUG'
        }
    }
}

LOGGER = logging.getLogger('db')

PWA_APP_NAME = 'nomoney.shop'
PWA_APP_DESCRIPTION = 'Plattform to exchange goods and services and calculate possible deals direct and indirect'
PWA_APP_THEME_COLOR = '#1da1f2'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {
        'src': '/static/logo.png',
        'sizes': '160x160'
    }
]
PWA_APP_ICONS_APPLE = [
    {
        'src': '/static/logo.png',
        'sizes': '160x160'
    }
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '/static/logo.png',
        'media': '(device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2)'
    }
]
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'de-DE'

for provider in ('GOOGLE', 'GITHUB', 'TWITTER', 'FACEBOOK', 'INSTAGRAM'):
    # pylint: disable=invalid-name
    _key = 'SOCIAL_AUTH_{}_KEY'.format(provider)
    setattr(sys.modules[__name__], _key, config(_key, default=None))
    # pylint: disable=invalid-name
    _secret = 'SOCIAL_AUTH_{}_SECRET'.format(provider)
    setattr(sys.modules[__name__], _secret, config(_secret, default=None))

